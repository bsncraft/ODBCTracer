
#include "stdafx.h"
#include "odbctracer.h"
#include <sys/stat.h>
#include <direct.h>
#include <time.h>
#include "sql.h"
#include "sqlext.h"

#define MAX_BUFFER_CONVERT 1024

#define ID2STRINGMAP_BEGIN(funcname) \
char * funcname(int code) \
{ \
switch(code) {

#define ID2STRINGMAP_ELEMENT(el) case el: return #el;
#define ID2STRINGMAP_ELEMENT2(eln, elv) case eln: return elv;

#define ID2STRINGMAP_END() \
	default:\
		return "unknown code"; }}

ID2STRINGMAP_BEGIN(GetInfoType2Char)
	ID2STRINGMAP_ELEMENT( SQL_ODBC_VER)
	ID2STRINGMAP_ELEMENT( SQL_ACTIVE_ENVIRONMENTS)
	ID2STRINGMAP_ELEMENT( SQL_ACCESSIBLE_TABLES)	
	ID2STRINGMAP_ELEMENT( SQL_ALTER_DOMAIN)
	ID2STRINGMAP_ELEMENT( SQL_ALTER_TABLE)
	ID2STRINGMAP_ELEMENT( SQL_ASYNC_MODE)
	ID2STRINGMAP_ELEMENT( SQL_BATCH_ROW_COUNT)
	ID2STRINGMAP_ELEMENT( SQL_CATALOG_LOCATION)
	ID2STRINGMAP_ELEMENT( SQL_CATALOG_NAME_SEPARATOR)
	ID2STRINGMAP_ELEMENT( SQL_CATALOG_TERM)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_BIGINT)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_BIT)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_CHAR)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_DATE)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_DECIMAL)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_DOUBLE)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_FLOAT)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_INTEGER)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_LONGVARCHAR)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_NUMERIC)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_REAL)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_SMALLINT)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_TIME)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_TIMESTAMP)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_TINYINT)
	ID2STRINGMAP_ELEMENT( SQL_CONVERT_VARCHAR)
	ID2STRINGMAP_ELEMENT( SQL_DATETIME_LITERALS)
	ID2STRINGMAP_ELEMENT( SQL_CURSOR_COMMIT_BEHAVIOR)
	ID2STRINGMAP_ELEMENT( SQL_CURSOR_ROLLBACK_BEHAVIOR)
	ID2STRINGMAP_ELEMENT( SQL_TXN_ISOLATION_OPTION)
	ID2STRINGMAP_ELEMENT( SQL_MAX_INDEX_SIZE)
	ID2STRINGMAP_ELEMENT( SQL_MAX_PROCEDURE_NAME_LEN)
	ID2STRINGMAP_ELEMENT( SQL_MAX_ROW_SIZE)
	ID2STRINGMAP_ELEMENT( SQL_MAX_TABLES_IN_SELECT)
	ID2STRINGMAP_ELEMENT( SQL_MAX_COLUMNS_IN_GROUP_BY)
	ID2STRINGMAP_ELEMENT( SQL_MAX_COLUMNS_IN_INDEX)
	ID2STRINGMAP_ELEMENT( SQL_MAX_COLUMNS_IN_ORDER_BY)
	ID2STRINGMAP_ELEMENT( SQL_MAX_COLUMNS_IN_SELECT)
	ID2STRINGMAP_ELEMENT( SQL_MAX_COLUMNS_IN_TABLE)
	ID2STRINGMAP_ELEMENT( SQL_MAX_CATALOG_NAME_LEN)
	ID2STRINGMAP_ELEMENT( SQL_MAX_SCHEMA_NAME_LEN)
	ID2STRINGMAP_ELEMENT( SQL_MAX_TABLE_NAME_LEN)
	ID2STRINGMAP_ELEMENT( SQL_NULL_COLLATION)
	ID2STRINGMAP_ELEMENT( SQL_ORDER_BY_COLUMNS_IN_SELECT)
	ID2STRINGMAP_ELEMENT( SQL_INTEGRITY)
	ID2STRINGMAP_ELEMENT( SQL_ACCESSIBLE_PROCEDURES)
	ID2STRINGMAP_ELEMENT( SQL_SPECIAL_CHARACTERS)
	ID2STRINGMAP_ELEMENT( SQL_IDENTIFIER_QUOTE_CHAR)
	ID2STRINGMAP_ELEMENT( SQL_DYNAMIC_CURSOR_ATTRIBUTES1)
	ID2STRINGMAP_ELEMENT( SQL_KEYSET_CURSOR_ATTRIBUTES1)
	ID2STRINGMAP_ELEMENT( SQL_KEYSET_CURSOR_ATTRIBUTES2)
	ID2STRINGMAP_ELEMENT( SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1)
	ID2STRINGMAP_ELEMENT( SQL_STATIC_CURSOR_ATTRIBUTES1)
	ID2STRINGMAP_ELEMENT( SQL_STATIC_CURSOR_ATTRIBUTES2)
	ID2STRINGMAP_ELEMENT( SQL_NUMERIC_FUNCTIONS)
	ID2STRINGMAP_ELEMENT( SQL_STATIC_SENSITIVITY)
	ID2STRINGMAP_ELEMENT( SQL_LOCK_TYPES)
	ID2STRINGMAP_ELEMENT( SQL_SCROLL_OPTIONS)
	ID2STRINGMAP_ELEMENT( SQL_POSITIONED_STATEMENTS)
	ID2STRINGMAP_ELEMENT( SQL_NEED_LONG_DATA_LEN)
	ID2STRINGMAP_ELEMENT( SQL_QUALIFIER_USAGE)
	ID2STRINGMAP_ELEMENT( SQL_NON_NULLABLE_COLUMNS)
	ID2STRINGMAP_ELEMENT( SQL_CONCAT_NULL_BEHAVIOR)
	ID2STRINGMAP_ELEMENT( SQL_GROUP_BY)
	ID2STRINGMAP_ELEMENT( SQL_MAX_ROW_SIZE_INCLUDES_LONG)
	ID2STRINGMAP_ELEMENT( SQL_PROCEDURE_TERM)
	ID2STRINGMAP_ELEMENT( SQL_QUOTED_IDENTIFIER_CASE)
	ID2STRINGMAP_ELEMENT( SQL_SUBQUERIES)
	ID2STRINGMAP_ELEMENT( SQL_TABLE_TERM)
	ID2STRINGMAP_ELEMENT( SQL_MULT_RESULT_SETS)
	ID2STRINGMAP_ELEMENT( SQL_OJ_CAPABILITIES)
	ID2STRINGMAP_ELEMENT( SQL_PROCEDURES)
	ID2STRINGMAP_ELEMENT( SQL_LIKE_ESCAPE_CLAUSE)
	ID2STRINGMAP_ELEMENT( SQL_OUTER_JOINS)
	ID2STRINGMAP_ELEMENT( SQL_STRING_FUNCTIONS)
	ID2STRINGMAP_ELEMENT( SQL_SYSTEM_FUNCTIONS)
	ID2STRINGMAP_ELEMENT( SQL_TIMEDATE_FUNCTIONS)
	ID2STRINGMAP_ELEMENT( SQL_FILE_USAGE)
	ID2STRINGMAP_ELEMENT( SQL_DRIVER_ODBC_VER)
	ID2STRINGMAP_ELEMENT( SQL_TXN_CAPABLE)
	ID2STRINGMAP_ELEMENT( SQL_GETDATA_EXTENSIONS)
	ID2STRINGMAP_ELEMENT( SQL_SCROLL_CONCURRENCY)
	ID2STRINGMAP_ELEMENT( SQL_MAX_CONCURRENT_ACTIVITIES)
	ID2STRINGMAP_ELEMENT( SQL_MAX_DRIVER_CONNECTIONS)
	ID2STRINGMAP_ELEMENT( SQL_ODBC_API_CONFORMANCE)
	ID2STRINGMAP_ELEMENT( SQL_ODBC_SQL_CONFORMANCE)
	ID2STRINGMAP_ELEMENT( SQL_ODBC_INTERFACE_CONFORMANCE)
	ID2STRINGMAP_ELEMENT( SQL_KEYWORDS) 
	ID2STRINGMAP_ELEMENT( SQL_DATA_SOURCE_READ_ONLY)
	ID2STRINGMAP_ELEMENT( SQL_BOOKMARK_PERSISTENCE)
	ID2STRINGMAP_ELEMENT( SQL_FETCH_DIRECTION)
	ID2STRINGMAP_ELEMENT( SQL_SCHEMA_TERM)
	ID2STRINGMAP_ELEMENT( SQL_IDENTIFIER_CASE)
	ID2STRINGMAP_ELEMENT( SQL_DATABASE_NAME)
	ID2STRINGMAP_ELEMENT( SQL_DRIVER_NAME)
	ID2STRINGMAP_ELEMENT( SQL_DRIVER_VER)
	ID2STRINGMAP_ELEMENT( SQL_DBMS_NAME)
	ID2STRINGMAP_ELEMENT( SQL_DBMS_VER)
	ID2STRINGMAP_ELEMENT( SQL_DATA_SOURCE_NAME)
	ID2STRINGMAP_ELEMENT( SQL_USER_NAME)
	ID2STRINGMAP_ELEMENT( SQL_SERVER_NAME)
ID2STRINGMAP_END()

ID2STRINGMAP_BEGIN(Returncode2Char)
	ID2STRINGMAP_ELEMENT(SQL_SUCCESS)
	ID2STRINGMAP_ELEMENT(SQL_NO_DATA_FOUND)
	ID2STRINGMAP_ELEMENT(SQL_NEED_DATA)
	ID2STRINGMAP_ELEMENT(SQL_INVALID_HANDLE)
	ID2STRINGMAP_ELEMENT(SQL_SUCCESS_WITH_INFO)
	ID2STRINGMAP_ELEMENT(SQL_ERROR)
	ID2STRINGMAP_ELEMENT(SQL_STILL_EXECUTING)
ID2STRINGMAP_END()

ID2STRINGMAP_BEGIN(TracerType2SQLType)
	ID2STRINGMAP_ELEMENT2(TYP_UNKNOWN, "unknown type")
	ID2STRINGMAP_ELEMENT2(TYP_SQLPOINTER, "SQLPOINTER")
	ID2STRINGMAP_ELEMENT2(TYP_SQLSMALLINT, "SQLSMALLINT")
	ID2STRINGMAP_ELEMENT2(TYP_SQLUSMALLINT, "SQLUSMALLINT")
	ID2STRINGMAP_ELEMENT2(TYP_SQLINTEGER, "SQLINTEGER")
	ID2STRINGMAP_ELEMENT2(TYP_SQLUINTEGER, "SQLUINTEGER")
	ID2STRINGMAP_ELEMENT2(TYP_SQLPOINTER_PTR, "SQLPOINTER*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLWCHAR_PTR, "SQLWCHAR*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLCHAR_PTR, "SQLCHAR*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLSMALLINT_PTR, "SQLSMALLINT*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLUSMALLINT_PTR, "SQLUSMALLINT*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLINTEGER_PTR, "SQLINTEGER*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLUINTEGER_PTR, "SQLUINTEGER*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHDESC, "SQLHDESC")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHSTMT, "SQLHSTMT")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHDBC, "SQLHDBC")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHWND, "SQLHWND")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHENV, "SQLHENV")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHANDLE, "SQLHANDLE")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHDESC_PTR, "SQLHDESC*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHSTMT_PTR, "SQLHSTMT*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHDBC_PTR, "SQLHDBC*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHWND_PTR, "SQLHWND*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHENV_PTR, "SQLHENV*")
	ID2STRINGMAP_ELEMENT2(TYP_SQLHANDLE_PTR, "SQLHANDLE*")
ID2STRINGMAP_END()

void ODBCWriteLog(std::string log)
{
	if (ODBCTraceOptions::getUniqueInstance()->fileloggingactivated)
	{
		FILE* file = fopen(ODBCTraceOptions::getUniqueInstance()->logfile.c_str(), "a");

		if (file)
		{
			char logtime[64]; _strtime(logtime);
			fprintf(file, "%s %s\n", logtime, log.c_str());
			fclose(file);
		}
	}
}

void ODBCTrace(ODBCTraceCall* call, bool calling)
{
	if (calling) return;
	ODBCTraceOptions* option = ODBCTraceOptions::getUniqueInstance();

	//log the functions of interest...
	if (option->logFunction(call->function_id))
	{
		
		const std::string procId = std::to_string(GetCurrentProcessId());
		const std::string proc = procId + "-" + std::to_string(GetCurrentThreadId());		
		const std::clock_t begin_time = clock();

		for (int i = 0; i < call->arguments_count; i++)
		{
			ODBCTraceArgument* arg = &call->arguments[i];
			switch (arg->type)
			{
				case TYP_SQLWCHAR_PTR:
				{
					if (!arg->value)
						return;

					char buffer[16000]; 
					wcstombs(buffer, (SQLWCHAR*)arg->value, sizeof(buffer));
					option->clocks[proc] = begin_time;
					option->logs[proc] = buffer;
					memset(buffer, 0, sizeof buffer);
					return;
				}
				case TYP_SQLCHAR_PTR:
				{
					if (!arg->value)
						return;
				
					option->clocks[proc] = begin_time;
					option->logs[proc] = (char*)arg->value;
					return;
				}
			}
		}

		char	szProcName[MAX_PATH];
		std::string cmdLine = GetCommandLine();
		auto pos1 = cmdLine.find('\"');
		if (pos1 >= 0)
		{
			auto pos2 = cmdLine.find('\"', pos1 + 1);
			if (pos2 > 0)
			{
				cmdLine = cmdLine.substr(pos1 + 1, pos2);
			}
		}
		pos1 = cmdLine.find('\/');
		if (pos1 > 0)
		{
			cmdLine = cmdLine.substr(0, pos1);
		}

		std::transform(cmdLine.begin(), cmdLine.end(), cmdLine.begin(), ::tolower);
		if (cmdLine.find("excel") != std::string::npos)
		{
			cmdLine = "excel";
		}
		
		_splitpath(cmdLine.c_str(), NULL, NULL, szProcName, NULL);
		std::string log = szProcName;
		
		log.append(' ' + procId + ' ');				

		if (option->clocks.count(proc) == 0 || option->logs.count(proc) == 0)
			return;
		
		auto ticks = float(begin_time - option->clocks.at(proc)) / CLOCKS_PER_SEC;
		option->clocks.erase(proc);
		log.append(' ' + std::to_string(round(ticks * 100) / 100).substr(0, 4));
		log.append("ms ");

		auto& statement = std::regex_replace(option->logs.at(proc), std::regex("\\r\\n|\\r|\\n"), " ");
		log.append(statement);
		option->logs.erase(proc);

		ODBCWriteLog(log);
	}
}

